import os
from dotenv import load_dotenv
import sys
import signal
import asyncio
from telethon import TelegramClient, events
import random
import platform
import torch
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append('/app')

# –î–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Docker
def handle_exit(sig, frame):
    print(f"Received exit signal {sig}, shutting down...")
    sys.exit(0)

signal.signal(signal.SIGINT, handle_exit)
signal.signal(signal.SIGTERM, handle_exit)


class TrainedBot:
    """–ë–æ—Ç —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é"""

    def __init__(self, model_path="./my_trained_model"):
        try:
            self.tokenizer = GPT2Tokenizer.from_pretrained(model_path)
            self.model = GPT2LMHeadModel.from_pretrained(model_path)
            self.model.eval()
            self.model_loaded = True
            print("‚úÖ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.model_loaded = False
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã
            self.fallback_responses = [
                "–ö—Ä—É—Ç–æ–π –ø–æ—Å—Ç! üî•", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üëç", "–û—Ç–ª–∏—á–Ω–æ! üöÄ",
                "–ñ–¥—É –µ—â–µ! üí´", "–°—É–ø–µ—Ä! üòÑ"
            ]

    def generate_response(self, post_text):
        if not self.model_loaded:
            return random.choice(self.fallback_responses)

        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
            prompt = f"POST: {post_text} RESPONSE:"

            inputs = self.tokenizer.encode(prompt, return_tensors="pt")

            with torch.no_grad():
                outputs = self.model.generate(
                    inputs,
                    max_length=inputs.shape[1] + 30,
                    max_new_tokens=25,
                    do_sample=True,
                    temperature=0.8,
                    top_p=0.9,
                    repetition_penalty=1.1,
                    pad_token_id=self.tokenizer.eos_token_id,
                    num_return_sequences=1
                )

            response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç
            if "RESPONSE:" in response:
                return response.split("RESPONSE:")[-1].strip()
            else:
                return response.replace(prompt, "").strip()

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return random.choice(self.fallback_responses)


async def create_client(session_name):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telegram"""
    API_ID = int(os.getenv('API_ID'))
    API_HASH = os.getenv('API_HASH')
    PHONE = os.getenv('PHONE')

    client = TelegramClient(
        session=session_name,
        api_id=API_ID,
        api_hash=API_HASH,
        device_model=f'PC-{platform.system()}',
        system_version=platform.release(),
        app_version='4.0.0',
        system_lang_code='ru',
        lang_code='ru'
    )

    await client.start(phone=PHONE)
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
    return client


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é"""
    CHANNELS = {
        '@stepiveter': '–°—Ç–µ–ø–∏–≤–µ—Ç–µ—Ä',
        '@tracktap': '–¢—Ä–∞–∫—Ç—ç–ø',
        # '@another_channel': '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤',
    }

    # 1. –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±–æ—Ç–∞...")
    client = await create_client('bot_session')

    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    bot = TrainedBot()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–∞–Ω–∞–ª–æ–≤
    channel_entities = []
    successful_channels = {}

    for channel_id, channel_name in CHANNELS.items():
        try:
            entity = await client.get_entity(channel_id)
            channel_entities.append(entity)
            successful_channels[entity.id] = {
                'entity': entity,
                'name': channel_name,
                'id': channel_id
            }
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel_name} ({channel_id})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_name} ({channel_id}): {e}")

    if not channel_entities:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞!")
        return

    @client.on(events.NewMessage(chats=channel_entities))
    async def message_handler(event):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await event.get_chat()

        # –ò—â–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel_info = successful_channels.get(chat.id, {})
        channel_display_name = channel_info.get('name', chat.title)
        channel_id = channel_info.get('id', 'N/A')

        print(f"üì® –ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ [{channel_display_name}]: {event.message.text[:100]}...")

        if event.message.sender_id != (await client.get_me()).id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            post_text = event.message.text or ""
            comment = bot.generate_response(post_text)
            print(f"ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è {channel_display_name}: {comment}")

            await asyncio.sleep(random.randint(5, 20))

            try:
                await client.send_message(
                    entity=chat,
                    message=comment,
                    comment_to=event.message.id
                )
                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ [{channel_display_name}]")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ [{channel_display_name}]: {e}")

    print(f"üöÄ –ë–æ—Ç —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é –∑–∞–ø—É—â–µ–Ω!")
    print(f"üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–º {len(channel_entities)} –∫–∞–Ω–∞–ª–æ–≤:")
    for channel_info in successful_channels.values():
        print(f"   ‚Ä¢ {channel_info['name']} ({channel_info['id']})")

    await client.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())
